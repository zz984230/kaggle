from sklearn import linear_model, metrics
from dl_group.credit_score.code.credit_data import CreditPreprocessData
from scipy import interp
import matplotlib.pyplot as plt
import numpy as np
from sklearn import model_selection
from sklearn import svm
from xgboost import  XGBClassifier


class ClassifiedModel(object):
    def __init__(self, ori_X, ori_y, test_X=None, test_y=None, cls_name="logicalRegression"):
        self.__ori_X = ori_X
        self.__ori_y = ori_y
        self.__train_X = None
        self.__train_y = None
        self.__val_X = None
        self.__val_y = None
        self.__test_X = test_X
        self.__test_y = test_y
        self.__cls_name = cls_name

    def __simple_split_train_data(self):
        """
        划分训练集
        """
        self.__train_X, self.__val_X, self.__train_y, self.__val_y = model_selection.train_test_split(self.__ori_X, self.__ori_y, test_size=0.3, random_state=0)

    def __logical_regression_model(self):
        cls = linear_model.LogisticRegression().fit(self.__train_X, self.__train_y)
        score = cls.score(self.__val_X, self.__val_y)
        print(score)

    def __svc_model(self):
        cls = svm.SVC().fit(self.__train_X, self.__train_y)
        score = cls.score(self.__val_X, self.__val_y)
        print(score)

    def __xgboost_model(self):
        cls = XGBClassifier()
        cls.fit(self.__train_X, self.__train_y)
        pred_y = cls.predict(self.__val_X)
        acc = metrics.accuracy_score(self.__val_y, pred_y)
        print(acc)

    def train(self):
        self.__simple_split_train_data()
        if self.__cls_name == "logicalRegression":
            self.__logical_regression_model()
        elif self.__cls_name == "svm":
            self.__svc_model()
        elif self.__cls_name == "xgboost":
            self.__xgboost_model()

    def predict(self):
        pass

if __name__ == "__main__":
    feature_select_credit = CreditPreprocessData("../data/preprocess/SMOTE_train.csv")
    feature_select_credit.load_oversampling_data()
    feature_select_credit.rfe_selected_data()
    train_X, train_y = feature_select_credit.selected_feature_label_data

    lr_model = ClassifiedModel(train_X, train_y, cls_name="xgboost")
    lr_model.train()
